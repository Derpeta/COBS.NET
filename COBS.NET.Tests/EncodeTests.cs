using System.Linq;

using Xunit;

namespace COBS.NET.Tests
{
    public class EncodeTests
    {
        /// <summary>
        /// Test data for COBS encoding and decoding.
        /// </summary>
        private readonly COBSExample[] TestCases = {
            new(new byte[] {  0x00 }, new byte[] { 0x01, 0x01 }),
            new(new byte[] {  0x00, 0x00 }, new byte[] { 0x01, 0x01, 0x01 }),
            new(new byte[] {  0x00, 0x11, 0x00 }, new byte[] {  0x01, 0x02, 0x11, 0x01 }),
            new(new byte[] {  0x11, 0x22, 0x00, 0x33 }, new byte[] {  0x03, 0x11, 0x22, 0x02, 0x33 }),
            new(new byte[] {  0x03, 0x04, 0x05, 0xFF, 0x00, 0x01 }, new byte[] {  0x05, 0x03, 0x04, 0x05, 0xFF, 0x02, 0x01 }),
            new(new byte[255],
                new byte[]
                {
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01 }),
            new(new byte[256],
                new byte[]
                {
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                    0x01, 0x01, 0x01, 0x01, 0x01 }),
            new(new byte[]
                { // Test data of size 260. On position 258 a zero is set
                    0x9A, 0x2B, 0xA3, 0x97, 0x71, 0x68, 0x37, 0x83, 0x71,
                    0x42, 0xBA, 0x64, 0xE3, 0x87, 0x66, 0x2E, 0xF7, 0xFA,
                    0x4F, 0x41, 0x58, 0x7C, 0x71, 0x7A, 0x6C, 0x82, 0xA4,
                    0xBF, 0x4F, 0x42, 0xF2, 0xEC, 0x97, 0x09, 0x4D, 0x73,
                    0xF2, 0x2D, 0xBE, 0xC1, 0x1D, 0xAB, 0x5D, 0x65, 0xFC,
                    0xE1, 0x49, 0xFE, 0x58, 0x20, 0x5D, 0x1E, 0xA7, 0x1A,
                    0x7E, 0x08, 0x86, 0xB1, 0x5C, 0xF6, 0x7A, 0xCB, 0xB8,
                    0x57, 0xF3, 0x90, 0x24, 0xAF, 0xA4, 0xC6, 0x1B, 0x23,
                    0x7D, 0x0F, 0x64, 0xE2, 0xE7, 0x81, 0xFD, 0x9E, 0xF9,
                    0xD1, 0x2A, 0xA1, 0x37, 0x8F, 0x7B, 0xBA, 0x40, 0x51,
                    0x59, 0x77, 0x48, 0xC8, 0x1B, 0x8C, 0x70, 0xE2, 0xB6,
                    0xAF, 0x8C, 0x2A, 0x9F, 0x8C, 0xFD, 0x22, 0xB9, 0xAA,
                    0x45, 0xAB, 0xC3, 0x23, 0xCC, 0x79, 0x8E, 0xCF, 0xA9,
                    0x8B, 0x3E, 0xE9, 0x12, 0x53, 0x03, 0xB7, 0x5C, 0xFE,
                    0x3B, 0x6C, 0xBD, 0x0D, 0x85, 0x5D, 0x6A, 0x14, 0x6D,
                    0x04, 0x63, 0xEB, 0xCF, 0xA1, 0x79, 0x5C, 0x34, 0x4D,
                    0x78, 0xBC, 0xC6, 0x84, 0xEF, 0x43, 0x1C, 0xC8, 0xED,
                    0x14, 0x91, 0x72, 0xA2, 0x60, 0xAA, 0xAC, 0x33, 0xC7,
                    0x69, 0x7B, 0x76, 0xB5, 0xB7, 0xD9, 0x75, 0x48, 0x1D,
                    0x83, 0x15, 0x4C, 0xDB, 0x5F, 0x9B, 0x79, 0x5E, 0xF9,
                    0x44, 0xFE, 0xB8, 0x13, 0xB6, 0xCE, 0x89, 0xAB, 0x23,
                    0xF1, 0x65, 0xE7, 0xDC, 0x2A, 0x91, 0x2A, 0x4C, 0xF3,
                    0x71, 0xE3, 0xBA, 0x20, 0x59, 0xF0, 0x03, 0x1C, 0x8F,
                    0x59, 0xBC, 0x44, 0x55, 0x38, 0xB9, 0x68, 0x71, 0xED,
                    0x41, 0x5D, 0xB2, 0x41, 0x8F, 0x95, 0xB2, 0xF9, 0x03,
                    0x12, 0x16, 0xE1, 0x44, 0x0B, 0x25, 0x9D, 0x15, 0xD3,
                    0x16, 0x91, 0x12, 0x8C, 0xA3, 0x07, 0xE5, 0x9A, 0x59,
                    0xBD, 0x5D, 0x6D, 0x91, 0x53, 0xDC, 0x0C, 0xA4, 0xD3,
                    0xC9, 0x73, 0x7E, 0x5E, 0x8B, 0x4A, 0x37, 0x73, 0x03,
                    0x04, 0x05, 0xFF, 0x00, 0x01
                },
                new byte[]
                { // Test result data where the first zero is more then 254 bytes
                    0xFF, 0x9A, 0x2B, 0xA3, 0x97, 0x71, 0x68, 0x37, 0x83,
                    0x71, 0x42, 0xBA, 0x64, 0xE3, 0x87, 0x66, 0x2E, 0xF7,
                    0xFA, 0x4F, 0x41, 0x58, 0x7C, 0x71, 0x7A, 0x6C, 0x82,
                    0xA4, 0xBF, 0x4F, 0x42, 0xF2, 0xEC, 0x97, 0x09, 0x4D,
                    0x73, 0xF2, 0x2D, 0xBE, 0xC1, 0x1D, 0xAB, 0x5D, 0x65,
                    0xFC, 0xE1, 0x49, 0xFE, 0x58, 0x20, 0x5D, 0x1E, 0xA7,
                    0x1A, 0x7E, 0x08, 0x86, 0xB1, 0x5C, 0xF6, 0x7A, 0xCB,
                    0xB8, 0x57, 0xF3, 0x90, 0x24, 0xAF, 0xA4, 0xC6, 0x1B,
                    0x23, 0x7D, 0x0F, 0x64, 0xE2, 0xE7, 0x81, 0xFD, 0x9E,
                    0xF9, 0xD1, 0x2A, 0xA1, 0x37, 0x8F, 0x7B, 0xBA, 0x40,
                    0x51, 0x59, 0x77, 0x48, 0xC8, 0x1B, 0x8C, 0x70, 0xE2,
                    0xB6, 0xAF, 0x8C, 0x2A, 0x9F, 0x8C, 0xFD, 0x22, 0xB9,
                    0xAA, 0x45, 0xAB, 0xC3, 0x23, 0xCC, 0x79, 0x8E, 0xCF,
                    0xA9, 0x8B, 0x3E, 0xE9, 0x12, 0x53, 0x03, 0xB7, 0x5C,
                    0xFE, 0x3B, 0x6C, 0xBD, 0x0D, 0x85, 0x5D, 0x6A, 0x14,
                    0x6D, 0x04, 0x63, 0xEB, 0xCF, 0xA1, 0x79, 0x5C, 0x34,
                    0x4D, 0x78, 0xBC, 0xC6, 0x84, 0xEF, 0x43, 0x1C, 0xC8,
                    0xED, 0x14, 0x91, 0x72, 0xA2, 0x60, 0xAA, 0xAC, 0x33,
                    0xC7, 0x69, 0x7B, 0x76, 0xB5, 0xB7, 0xD9, 0x75, 0x48,
                    0x1D, 0x83, 0x15, 0x4C, 0xDB, 0x5F, 0x9B, 0x79, 0x5E,
                    0xF9, 0x44, 0xFE, 0xB8, 0x13, 0xB6, 0xCE, 0x89, 0xAB,
                    0x23, 0xF1, 0x65, 0xE7, 0xDC, 0x2A, 0x91, 0x2A, 0x4C,
                    0xF3, 0x71, 0xE3, 0xBA, 0x20, 0x59, 0xF0, 0x03, 0x1C,
                    0x8F, 0x59, 0xBC, 0x44, 0x55, 0x38, 0xB9, 0x68, 0x71,
                    0xED, 0x41, 0x5D, 0xB2, 0x41, 0x8F, 0x95, 0xB2, 0xF9,
                    0x03, 0x12, 0x16, 0xE1, 0x44, 0x0B, 0x25, 0x9D, 0x15,
                    0xD3, 0x16, 0x91, 0x12, 0x8C, 0xA3, 0x07, 0xE5, 0x9A,
                    0x59, 0xBD, 0x5D, 0x6D, 0x91, 0x53, 0xDC, 0x0C, 0xA4,
                    0xD3, 0xC9, 0x73, 0x0B, 0x7E, 0x5E, 0x8B, 0x4A, 0x37,
                    0x73, 0x03, 0x04, 0x05, 0xFF, 0x02, 0x01
                })
        };

        /// <summary>
        /// Tests the COBS encoding.
        /// </summary>
        /// <param name="index"></param>
        [Theory]
        [InlineData(0)]
        [InlineData(1)]
        [InlineData(2)]
        [InlineData(3)]
        [InlineData(4)]
        [InlineData(5)]
        [InlineData(6)]
        [InlineData(7)]
        public void EncodeTest(int index)
        {
            // Act
            var encodedData = COBS.Encode(TestCases[index].Unencoded, false);

            // Assert
            Assert.Equal(TestCases[index].Encoded, encodedData);
        }

        /// <summary>
        /// Tests the COBS encoding.
        /// </summary>
        /// <param name="index"></param>
        [Theory]
        [InlineData(0)]
        [InlineData(1)]
        [InlineData(2)]
        [InlineData(3)]
        [InlineData(4)]
        [InlineData(5)]
        [InlineData(6)]
        [InlineData(7)]
        public void EncodeTestAddZeroByte(int index)
        {
            // Act
            var encodedData = COBS.Encode(TestCases[index].Unencoded, true);

            // Add Zero byte to end of test encoded data
            var bytes = TestCases[index].Encoded.Concat(new byte[] { 0x00 });

            // Assert
            Assert.Equal(bytes, encodedData);
        }


        /// <summary>
        /// Tests the COBS decoding.
        /// </summary>
        /// <param name="index"></param>
        [Theory]
        [InlineData(0)]
        [InlineData(1)]
        [InlineData(2)]
        [InlineData(3)]
        [InlineData(4)]
        [InlineData(5)]
        [InlineData(6)]
        [InlineData(7)]
        public void DecodeTest(int index)
        {
            // Act
            var decodedData = COBS.Decode(TestCases[index].Encoded, false);

            // Assert
            Assert.Equal(TestCases[index].Unencoded, decodedData);
        }

        /// <summary>
        /// Tests the COBS decoding.
        /// </summary>
        /// <param name="index"></param>
        [Theory]
        [InlineData(0)]
        [InlineData(1)]
        [InlineData(2)]
        [InlineData(3)]
        [InlineData(4)]
        [InlineData(5)]
        [InlineData(6)]
        [InlineData(7)]
        public void DecodeTestWithZeroByte(int index)
        {
            // Add Zero byte to end of test encoded data
            var encodedData = TestCases[index].Encoded
                .Concat(new byte[] { 0x00 })
                .ToArray();

            // Act
            var decodedData = COBS.Decode(encodedData, true);

            // Assert
            Assert.Equal(TestCases[index].Unencoded, decodedData);
        }
    }
}
